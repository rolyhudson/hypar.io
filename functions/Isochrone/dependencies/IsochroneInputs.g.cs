// This code was generated by Hypar.
// Edits to this code will be overwritten the next time you run 'hypar init'.
// DO NOT EDIT THIS FILE.

using Elements;
using Elements.GeoJSON;
using Elements.Geometry;
using Elements.Geometry.Solids;
using Elements.Validators;
using Elements.Serialization.JSON;
using Hypar.Functions;
using Hypar.Functions.Execution;
using Hypar.Functions.Execution.AWS;
using Hypar.Model;
using System;
using System.Collections.Generic;
using System.Linq;
using Line = Elements.Geometry.Line;
using Polygon = Elements.Geometry.Polygon;

namespace Isochrone
{
    #pragma warning disable // Disable all warnings

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v13.0.0.0)")]
    
    public  class IsochroneInputs : S3Args
    
    {
        [Newtonsoft.Json.JsonConstructor]
        
        public IsochroneInputs(double @travelSpeed, double @timeBand, IsochroneInputsVisualisationMethod @visualisationMethod, string bucketName, string uploadsBucket, Dictionary<string, string> modelInputKeys, string gltfKey, string elementsKey, string ifcKey):
        base(bucketName, uploadsBucket, modelInputKeys, gltfKey, elementsKey, ifcKey)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<IsochroneInputs>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @travelSpeed, @timeBand, @visualisationMethod});
            }
        
            this.TravelSpeed = @travelSpeed;
            this.TimeBand = @timeBand;
            this.VisualisationMethod = @visualisationMethod;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        /// <summary>Travel speed in metres per second</summary>
        [Newtonsoft.Json.JsonProperty("Travel speed", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 20D)]
        public double TravelSpeed { get; set; } = 1.5D;
    
        /// <summary>Time of travel per isochrone band in seconds</summary>
        [Newtonsoft.Json.JsonProperty("Time band", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(5D, 1000D)]
        public double TimeBand { get; set; } = 300D;
    
        /// <summary>Select lines or nodes for visualisation</summary>
        [Newtonsoft.Json.JsonProperty("Visualisation method", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public IsochroneInputsVisualisationMethod VisualisationMethod { get; set; }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum IsochroneInputsVisualisationMethod
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Render graph link lines")]
        Render_graph_link_lines = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Render graph nodes")]
        Render_graph_nodes = 1,
    
    }
}